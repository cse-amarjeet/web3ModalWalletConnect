{"ast":null,"code":"import '../../types/formatter.js';\nimport { hexToBigInt } from '../../utils/encoding/fromHex.js';\nimport { defineBlock } from '../../utils/formatters/block.js';\nimport { defineTransaction, formatTransaction } from '../../utils/formatters/transaction.js';\nexport const formattersOptimism = {\n  block: /*#__PURE__*/defineBlock({\n    format(args) {\n      const transactions = args.transactions?.map(transaction => {\n        if (typeof transaction === 'string') return transaction;\n        const formatted = formatTransaction(transaction);\n        if (formatted.typeHex === '0x7e') {\n          formatted.isSystemTx = transaction.isSystemTx;\n          formatted.mint = transaction.mint ? hexToBigInt(transaction.mint) : undefined;\n          formatted.sourceHash = transaction.sourceHash;\n          formatted.type = 'deposit';\n        }\n        return formatted;\n      });\n      return {\n        transactions\n      };\n    }\n  }),\n  transaction: /*#__PURE__*/defineTransaction({\n    format(args) {\n      const transaction = {};\n      if (args.type === '0x7e') {\n        transaction.isSystemTx = args.isSystemTx;\n        transaction.mint = args.mint ? hexToBigInt(args.mint) : undefined;\n        transaction.sourceHash = args.sourceHash;\n        transaction.type = 'deposit';\n      }\n      return transaction;\n    }\n  })\n};","map":{"version":3,"names":["hexToBigInt","defineBlock","defineTransaction","formatTransaction","formattersOptimism","block","format","args","transactions","map","transaction","formatted","typeHex","isSystemTx","mint","undefined","sourceHash","type"],"sources":["/home/amarjeet/Amarjeet/realwareWeb3/metamask_sign/Dapp-Starter code/node_modules/viem/src/chains/formatters/optimism.ts"],"sourcesContent":["import type { FeeValuesEIP1559 } from '../../types/fee.js'\nimport { type Formatters } from '../../types/formatter.js'\nimport type { Hash, Hex } from '../../types/misc.js'\nimport type {\n  Index,\n  Quantity,\n  RpcTransaction as RpcTransaction_,\n} from '../../types/rpc.js'\nimport type {\n  Transaction as Transaction_,\n  TransactionBase,\n} from '../../types/transaction.js'\nimport { hexToBigInt } from '../../utils/encoding/fromHex.js'\nimport { defineBlock } from '../../utils/formatters/block.js'\nimport {\n  defineTransaction,\n  formatTransaction,\n} from '../../utils/formatters/transaction.js'\n\ntype RpcTransaction = RpcTransaction_ & {\n  isSystemTx?: undefined\n  mint?: undefined\n  sourceHash?: undefined\n}\n\ntype Transaction = Transaction_ & {\n  isSystemTx?: undefined\n  mint?: undefined\n  sourceHash?: undefined\n}\n\nexport type RpcDepositTransaction = TransactionBase<Quantity, Index> &\n  FeeValuesEIP1559<Quantity> & {\n    isSystemTx?: boolean\n    mint?: Hex\n    sourceHash: Hex\n    type: '0x7e'\n  }\n\nexport type DepositTransaction = TransactionBase &\n  FeeValuesEIP1559 & {\n    isSystemTx?: boolean\n    mint?: bigint\n    sourceHash: Hex\n    type: 'deposit'\n  }\n\nexport type OptimismFormatOverrides = {\n  RpcBlock: {\n    transactions: Hash[] | OptimismFormatOverrides['RpcTransaction'][]\n  }\n  RpcTransaction: RpcTransaction | RpcDepositTransaction\n  Transaction: Transaction | DepositTransaction\n}\n\nexport const formattersOptimism = {\n  block: /*#__PURE__*/ defineBlock({\n    format(args: OptimismFormatOverrides['RpcBlock']) {\n      const transactions = args.transactions?.map((transaction) => {\n        if (typeof transaction === 'string') return transaction\n        const formatted = formatTransaction(\n          transaction as RpcTransaction,\n        ) as OptimismFormatOverrides['Transaction']\n        if (formatted.typeHex === '0x7e') {\n          formatted.isSystemTx = transaction.isSystemTx\n          formatted.mint = transaction.mint\n            ? hexToBigInt(transaction.mint)\n            : undefined\n          formatted.sourceHash = transaction.sourceHash\n          formatted.type = 'deposit'\n        }\n        return formatted\n      }) as Hash[] | OptimismFormatOverrides['Transaction'][]\n      return {\n        transactions,\n      }\n    },\n  }),\n  transaction: /*#__PURE__*/ defineTransaction({\n    format(args: OptimismFormatOverrides['RpcTransaction']) {\n      const transaction = {} as OptimismFormatOverrides['Transaction']\n      if (args.type === '0x7e') {\n        transaction.isSystemTx = args.isSystemTx\n        transaction.mint = args.mint ? hexToBigInt(args.mint) : undefined\n        transaction.sourceHash = args.sourceHash\n        transaction.type = 'deposit'\n      }\n      return transaction\n    },\n  }),\n} as const satisfies Formatters\n"],"mappings":"AACA,OAAgC,0BAA0B;AAW1D,SAASA,WAAW,QAAQ,iCAAiC;AAC7D,SAASC,WAAW,QAAQ,iCAAiC;AAC7D,SACEC,iBAAiB,EACjBC,iBAAiB,QACZ,uCAAuC;AAsC9C,OAAO,MAAMC,kBAAkB,GAAG;EAChCC,KAAK,EAAE,aAAcJ,WAAW,CAAC;IAC/BK,MAAMA,CAACC,IAAyC;MAC9C,MAAMC,YAAY,GAAGD,IAAI,CAACC,YAAY,EAAEC,GAAG,CAAEC,WAAW,IAAI;QAC1D,IAAI,OAAOA,WAAW,KAAK,QAAQ,EAAE,OAAOA,WAAW;QACvD,MAAMC,SAAS,GAAGR,iBAAiB,CACjCO,WAA6B,CACY;QAC3C,IAAIC,SAAS,CAACC,OAAO,KAAK,MAAM,EAAE;UAChCD,SAAS,CAACE,UAAU,GAAGH,WAAW,CAACG,UAAU;UAC7CF,SAAS,CAACG,IAAI,GAAGJ,WAAW,CAACI,IAAI,GAC7Bd,WAAW,CAACU,WAAW,CAACI,IAAI,CAAC,GAC7BC,SAAS;UACbJ,SAAS,CAACK,UAAU,GAAGN,WAAW,CAACM,UAAU;UAC7CL,SAAS,CAACM,IAAI,GAAG,SAAS;;QAE5B,OAAON,SAAS;MAClB,CAAC,CAAsD;MACvD,OAAO;QACLH;OACD;IACH;GACD,CAAC;EACFE,WAAW,EAAE,aAAcR,iBAAiB,CAAC;IAC3CI,MAAMA,CAACC,IAA+C;MACpD,MAAMG,WAAW,GAAG,EAA4C;MAChE,IAAIH,IAAI,CAACU,IAAI,KAAK,MAAM,EAAE;QACxBP,WAAW,CAACG,UAAU,GAAGN,IAAI,CAACM,UAAU;QACxCH,WAAW,CAACI,IAAI,GAAGP,IAAI,CAACO,IAAI,GAAGd,WAAW,CAACO,IAAI,CAACO,IAAI,CAAC,GAAGC,SAAS;QACjEL,WAAW,CAACM,UAAU,GAAGT,IAAI,CAACS,UAAU;QACxCN,WAAW,CAACO,IAAI,GAAG,SAAS;;MAE9B,OAAOP,WAAW;IACpB;GACD;CAC4B"},"metadata":{},"sourceType":"module","externalDependencies":[]}