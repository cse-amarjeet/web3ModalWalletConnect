{"ast":null,"code":"import { ChainDoesNotSupportContract, ChainMismatchError, ChainNotFoundError } from '../errors/chain.js';\nexport function assertCurrentChain(_ref) {\n  let {\n    chain,\n    currentChainId\n  } = _ref;\n  if (!chain) throw new ChainNotFoundError();\n  if (currentChainId !== chain.id) throw new ChainMismatchError({\n    chain,\n    currentChainId\n  });\n}\nexport function defineChain(chain, config) {\n  return {\n    ...chain,\n    formatters: config?.formatters,\n    serializers: config?.serializers\n  };\n}\nexport function getChainContractAddress(_ref2) {\n  let {\n    blockNumber,\n    chain,\n    contract: name\n  } = _ref2;\n  const contract = chain?.contracts?.[name];\n  if (!contract) throw new ChainDoesNotSupportContract({\n    chain,\n    contract: {\n      name\n    }\n  });\n  if (blockNumber && contract.blockCreated && contract.blockCreated > blockNumber) throw new ChainDoesNotSupportContract({\n    blockNumber,\n    chain,\n    contract: {\n      name,\n      blockCreated: contract.blockCreated\n    }\n  });\n  return contract.address;\n}","map":{"version":3,"names":["ChainDoesNotSupportContract","ChainMismatchError","ChainNotFoundError","assertCurrentChain","_ref","chain","currentChainId","id","defineChain","config","formatters","serializers","getChainContractAddress","_ref2","blockNumber","contract","name","contracts","blockCreated","address"],"sources":["/home/amarjeet/Amarjeet/realwareWeb3/metamask_sign/Dapp-Starter code/node_modules/viem/src/utils/chain.ts"],"sourcesContent":["import {\n  ChainDoesNotSupportContract,\n  ChainMismatchError,\n  ChainNotFoundError,\n} from '../errors/chain.js'\nimport type { Chain, ChainContract } from '../types/chain.js'\nimport type { Formatters } from '../types/formatter.js'\n\nexport type AssertCurrentChainParameters = {\n  chain?: Chain\n  currentChainId: number\n}\n\nexport function assertCurrentChain({\n  chain,\n  currentChainId,\n}: AssertCurrentChainParameters): void {\n  if (!chain) throw new ChainNotFoundError()\n  if (currentChainId !== chain.id)\n    throw new ChainMismatchError({ chain, currentChainId })\n}\n\nexport function defineChain<\n  TChain extends Chain,\n  TFormatters extends Formatters,\n>(\n  chain: TChain,\n  config?: Pick<Chain<TFormatters>, 'formatters' | 'serializers'>,\n) {\n  return {\n    ...chain,\n    formatters: config?.formatters,\n    serializers: config?.serializers,\n  }\n}\n\nexport function getChainContractAddress({\n  blockNumber,\n  chain,\n  contract: name,\n}: {\n  blockNumber?: bigint\n  chain: Chain\n  contract: string\n}) {\n  const contract = (chain?.contracts as Record<string, ChainContract>)?.[name]\n  if (!contract)\n    throw new ChainDoesNotSupportContract({\n      chain,\n      contract: { name },\n    })\n\n  if (\n    blockNumber &&\n    contract.blockCreated &&\n    contract.blockCreated > blockNumber\n  )\n    throw new ChainDoesNotSupportContract({\n      blockNumber,\n      chain,\n      contract: {\n        name,\n        blockCreated: contract.blockCreated,\n      },\n    })\n\n  return contract.address\n}\n"],"mappings":"AAAA,SACEA,2BAA2B,EAC3BC,kBAAkB,EAClBC,kBAAkB,QACb,oBAAoB;AAS3B,OAAM,SAAUC,kBAAkBA,CAAAC,IAAA,EAGH;EAAA,IAHI;IACjCC,KAAK;IACLC;EAAc,CACe,GAAAF,IAAA;EAC7B,IAAI,CAACC,KAAK,EAAE,MAAM,IAAIH,kBAAkB,EAAE;EAC1C,IAAII,cAAc,KAAKD,KAAK,CAACE,EAAE,EAC7B,MAAM,IAAIN,kBAAkB,CAAC;IAAEI,KAAK;IAAEC;EAAc,CAAE,CAAC;AAC3D;AAEA,OAAM,SAAUE,WAAWA,CAIzBH,KAAa,EACbI,MAA+D;EAE/D,OAAO;IACL,GAAGJ,KAAK;IACRK,UAAU,EAAED,MAAM,EAAEC,UAAU;IAC9BC,WAAW,EAAEF,MAAM,EAAEE;GACtB;AACH;AAEA,OAAM,SAAUC,uBAAuBA,CAAAC,KAAA,EAQtC;EAAA,IARuC;IACtCC,WAAW;IACXT,KAAK;IACLU,QAAQ,EAAEC;EAAI,CAKf,GAAAH,KAAA;EACC,MAAME,QAAQ,GAAIV,KAAK,EAAEY,SAA2C,GAAGD,IAAI,CAAC;EAC5E,IAAI,CAACD,QAAQ,EACX,MAAM,IAAIf,2BAA2B,CAAC;IACpCK,KAAK;IACLU,QAAQ,EAAE;MAAEC;IAAI;GACjB,CAAC;EAEJ,IACEF,WAAW,IACXC,QAAQ,CAACG,YAAY,IACrBH,QAAQ,CAACG,YAAY,GAAGJ,WAAW,EAEnC,MAAM,IAAId,2BAA2B,CAAC;IACpCc,WAAW;IACXT,KAAK;IACLU,QAAQ,EAAE;MACRC,IAAI;MACJE,YAAY,EAAEH,QAAQ,CAACG;;GAE1B,CAAC;EAEJ,OAAOH,QAAQ,CAACI,OAAO;AACzB"},"metadata":{},"sourceType":"module","externalDependencies":[]}