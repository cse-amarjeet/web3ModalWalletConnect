{"ast":null,"code":"import { parseAccount } from '../../accounts/utils/parseAccount.js';\nimport { estimateGas } from '../../actions/public/estimateGas.js';\nimport { getBlock } from '../../actions/public/getBlock.js';\nimport { getGasPrice } from '../../actions/public/getGasPrice.js';\nimport { getTransactionCount } from '../../actions/public/getTransactionCount.js';\nimport { AccountNotFoundError } from '../../errors/account.js';\nimport { BaseError } from '../../errors/base.js';\nimport { assertRequest } from './assertRequest.js';\nexport const defaultTip = 1500000000n; // 1.5 gwei\nexport async function prepareRequest(client, args) {\n  const {\n    account: account_,\n    gas,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce\n  } = args;\n  if (!account_) throw new AccountNotFoundError();\n  const account = parseAccount(account_);\n  const block = await getBlock(client, {\n    blockTag: 'latest'\n  });\n  const request = {\n    ...args,\n    from: account.address\n  };\n  if (typeof nonce === 'undefined') request.nonce = await getTransactionCount(client, {\n    address: account.address,\n    blockTag: 'pending'\n  });\n  if (typeof block.baseFeePerGas === 'bigint') {\n    if (typeof gasPrice !== 'undefined') throw new BaseError('Chain does not support legacy `gasPrice`.');\n    // EIP-1559 fees\n    if (typeof maxFeePerGas === 'undefined') {\n      // Set a buffer of 1.2x on top of the base fee to account for fluctuations.\n      request.maxPriorityFeePerGas = maxPriorityFeePerGas ?? defaultTip;\n      request.maxFeePerGas = block.baseFeePerGas * 120n / 100n + request.maxPriorityFeePerGas;\n    } else {\n      if (typeof maxPriorityFeePerGas === 'undefined' && maxFeePerGas < defaultTip) throw new BaseError('`maxFeePerGas` cannot be less than the default `maxPriorityFeePerGas` (1.5 gwei).');\n      request.maxFeePerGas = maxFeePerGas;\n      request.maxPriorityFeePerGas = maxPriorityFeePerGas ?? defaultTip;\n    }\n  } else {\n    if (typeof maxFeePerGas !== 'undefined' || typeof maxPriorityFeePerGas !== 'undefined') throw new BaseError('Chain does not support EIP-1559 fees.');\n    // Legacy fees\n    if (typeof gasPrice === 'undefined')\n      // Set a buffer of 1.2x on top of the base fee to account for fluctuations.\n      request.gasPrice = (await getGasPrice(client)) * 120n / 100n;\n  }\n  if (typeof gas === 'undefined') request.gas = await estimateGas(client, {\n    ...request,\n    account: {\n      address: account.address,\n      type: 'json-rpc'\n    }\n  });\n  assertRequest(request);\n  return request;\n}","map":{"version":3,"names":["parseAccount","estimateGas","getBlock","getGasPrice","getTransactionCount","AccountNotFoundError","BaseError","assertRequest","defaultTip","prepareRequest","client","args","account","account_","gas","gasPrice","maxFeePerGas","maxPriorityFeePerGas","nonce","block","blockTag","request","from","address","baseFeePerGas","type"],"sources":["/home/amarjeet/Amarjeet/realwareWeb3/metamask_sign/Dapp-Starter code/node_modules/viem/src/utils/transaction/prepareRequest.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport type { Account } from '../../accounts/types.js'\nimport { parseAccount } from '../../accounts/utils/parseAccount.js'\nimport {\n  type EstimateGasParameters,\n  estimateGas,\n} from '../../actions/public/estimateGas.js'\nimport { getBlock } from '../../actions/public/getBlock.js'\nimport { getGasPrice } from '../../actions/public/getGasPrice.js'\nimport { getTransactionCount } from '../../actions/public/getTransactionCount.js'\nimport type { SendTransactionParameters } from '../../actions/wallet/sendTransaction.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { AccountNotFoundError } from '../../errors/account.js'\nimport { BaseError } from '../../errors/base.js'\nimport type { GetAccountParameter } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\n\nimport { type AssertRequestParameters, assertRequest } from './assertRequest.js'\n\nexport type PrepareRequestParameters<\n  TAccount extends Account | undefined = undefined,\n> = GetAccountParameter<TAccount> & {\n  gas?: SendTransactionParameters['gas']\n  gasPrice?: SendTransactionParameters['gasPrice']\n  maxFeePerGas?: SendTransactionParameters['maxFeePerGas']\n  maxPriorityFeePerGas?: SendTransactionParameters['maxPriorityFeePerGas']\n  nonce?: SendTransactionParameters['nonce']\n}\n\nexport type PrepareRequestReturnType<\n  TAccount extends Account | undefined = undefined,\n  TParameters extends PrepareRequestParameters<TAccount> = PrepareRequestParameters<TAccount>,\n> = TParameters & {\n  from: Address\n  gas: SendTransactionParameters['gas']\n  gasPrice?: SendTransactionParameters['gasPrice']\n  maxFeePerGas?: SendTransactionParameters['maxFeePerGas']\n  maxPriorityFeePerGas?: SendTransactionParameters['maxPriorityFeePerGas']\n  nonce: SendTransactionParameters['nonce']\n}\n\nexport const defaultTip = 1_500_000_000n // 1.5 gwei\n\nexport async function prepareRequest<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n  TParameters extends PrepareRequestParameters<TAccount>,\n>(\n  client: Client<Transport, TChain, TAccount>,\n  args: TParameters,\n): Promise<PrepareRequestReturnType<TAccount, TParameters>> {\n  const {\n    account: account_,\n    gas,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce,\n  } = args\n  if (!account_) throw new AccountNotFoundError()\n  const account = parseAccount(account_)\n\n  const block = await getBlock(client, { blockTag: 'latest' })\n\n  const request = { ...args, from: account.address }\n\n  if (typeof nonce === 'undefined')\n    request.nonce = await getTransactionCount(client, {\n      address: account.address,\n      blockTag: 'pending',\n    })\n\n  if (typeof block.baseFeePerGas === 'bigint') {\n    if (typeof gasPrice !== 'undefined')\n      throw new BaseError('Chain does not support legacy `gasPrice`.')\n\n    // EIP-1559 fees\n    if (typeof maxFeePerGas === 'undefined') {\n      // Set a buffer of 1.2x on top of the base fee to account for fluctuations.\n      request.maxPriorityFeePerGas = maxPriorityFeePerGas ?? defaultTip\n      request.maxFeePerGas =\n        (block.baseFeePerGas * 120n) / 100n + request.maxPriorityFeePerGas\n    } else {\n      if (\n        typeof maxPriorityFeePerGas === 'undefined' &&\n        maxFeePerGas < defaultTip\n      )\n        throw new BaseError(\n          '`maxFeePerGas` cannot be less than the default `maxPriorityFeePerGas` (1.5 gwei).',\n        )\n      request.maxFeePerGas = maxFeePerGas\n      request.maxPriorityFeePerGas = maxPriorityFeePerGas ?? defaultTip\n    }\n  } else {\n    if (\n      typeof maxFeePerGas !== 'undefined' ||\n      typeof maxPriorityFeePerGas !== 'undefined'\n    )\n      throw new BaseError('Chain does not support EIP-1559 fees.')\n\n    // Legacy fees\n    if (typeof gasPrice === 'undefined')\n      // Set a buffer of 1.2x on top of the base fee to account for fluctuations.\n      request.gasPrice = ((await getGasPrice(client)) * 120n) / 100n\n  }\n\n  if (typeof gas === 'undefined')\n    request.gas = await estimateGas(client, {\n      ...request,\n      account: { address: account.address, type: 'json-rpc' },\n    } as EstimateGasParameters)\n\n  assertRequest(request as AssertRequestParameters)\n\n  return request as PrepareRequestReturnType<TAccount, TParameters>\n}\n"],"mappings":"AAGA,SAASA,YAAY,QAAQ,sCAAsC;AACnE,SAEEC,WAAW,QACN,qCAAqC;AAC5C,SAASC,QAAQ,QAAQ,kCAAkC;AAC3D,SAASC,WAAW,QAAQ,qCAAqC;AACjE,SAASC,mBAAmB,QAAQ,6CAA6C;AAIjF,SAASC,oBAAoB,QAAQ,yBAAyB;AAC9D,SAASC,SAAS,QAAQ,sBAAsB;AAIhD,SAAuCC,aAAa,QAAQ,oBAAoB;AAwBhF,OAAO,MAAMC,UAAU,GAAG,WAAc,EAAC;AAEzC,OAAO,eAAeC,cAAcA,CAKlCC,MAA2C,EAC3CC,IAAiB;EAEjB,MAAM;IACJC,OAAO,EAAEC,QAAQ;IACjBC,GAAG;IACHC,QAAQ;IACRC,YAAY;IACZC,oBAAoB;IACpBC;EAAK,CACN,GAAGP,IAAI;EACR,IAAI,CAACE,QAAQ,EAAE,MAAM,IAAIR,oBAAoB,EAAE;EAC/C,MAAMO,OAAO,GAAGZ,YAAY,CAACa,QAAQ,CAAC;EAEtC,MAAMM,KAAK,GAAG,MAAMjB,QAAQ,CAACQ,MAAM,EAAE;IAAEU,QAAQ,EAAE;EAAQ,CAAE,CAAC;EAE5D,MAAMC,OAAO,GAAG;IAAE,GAAGV,IAAI;IAAEW,IAAI,EAAEV,OAAO,CAACW;EAAO,CAAE;EAElD,IAAI,OAAOL,KAAK,KAAK,WAAW,EAC9BG,OAAO,CAACH,KAAK,GAAG,MAAMd,mBAAmB,CAACM,MAAM,EAAE;IAChDa,OAAO,EAAEX,OAAO,CAACW,OAAO;IACxBH,QAAQ,EAAE;GACX,CAAC;EAEJ,IAAI,OAAOD,KAAK,CAACK,aAAa,KAAK,QAAQ,EAAE;IAC3C,IAAI,OAAOT,QAAQ,KAAK,WAAW,EACjC,MAAM,IAAIT,SAAS,CAAC,2CAA2C,CAAC;IAElE;IACA,IAAI,OAAOU,YAAY,KAAK,WAAW,EAAE;MACvC;MACAK,OAAO,CAACJ,oBAAoB,GAAGA,oBAAoB,IAAIT,UAAU;MACjEa,OAAO,CAACL,YAAY,GACjBG,KAAK,CAACK,aAAa,GAAG,IAAI,GAAI,IAAI,GAAGH,OAAO,CAACJ,oBAAoB;KACrE,MAAM;MACL,IACE,OAAOA,oBAAoB,KAAK,WAAW,IAC3CD,YAAY,GAAGR,UAAU,EAEzB,MAAM,IAAIF,SAAS,CACjB,mFAAmF,CACpF;MACHe,OAAO,CAACL,YAAY,GAAGA,YAAY;MACnCK,OAAO,CAACJ,oBAAoB,GAAGA,oBAAoB,IAAIT,UAAU;;GAEpE,MAAM;IACL,IACE,OAAOQ,YAAY,KAAK,WAAW,IACnC,OAAOC,oBAAoB,KAAK,WAAW,EAE3C,MAAM,IAAIX,SAAS,CAAC,uCAAuC,CAAC;IAE9D;IACA,IAAI,OAAOS,QAAQ,KAAK,WAAW;MACjC;MACAM,OAAO,CAACN,QAAQ,GAAI,CAAC,MAAMZ,WAAW,CAACO,MAAM,CAAC,IAAI,IAAI,GAAI,IAAI;;EAGlE,IAAI,OAAOI,GAAG,KAAK,WAAW,EAC5BO,OAAO,CAACP,GAAG,GAAG,MAAMb,WAAW,CAACS,MAAM,EAAE;IACtC,GAAGW,OAAO;IACVT,OAAO,EAAE;MAAEW,OAAO,EAAEX,OAAO,CAACW,OAAO;MAAEE,IAAI,EAAE;IAAU;GAC7B,CAAC;EAE7BlB,aAAa,CAACc,OAAkC,CAAC;EAEjD,OAAOA,OAA0D;AACnE"},"metadata":{},"sourceType":"module","externalDependencies":[]}