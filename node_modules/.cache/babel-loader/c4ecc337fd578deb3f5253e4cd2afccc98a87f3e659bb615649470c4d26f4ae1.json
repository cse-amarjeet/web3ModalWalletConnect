{"ast":null,"code":"import { DecodeLogDataMismatch, DecodeLogTopicsMismatch } from '../../errors/abi.js';\nimport { decodeEventLog } from '../../utils/abi/decodeEventLog.js';\nimport { formatLog } from '../../utils/formatters/log.js';\n/**\n * Returns a list of event logs since the filter was created.\n *\n * - Docs: https://viem.sh/docs/actions/public/getFilterLogs.html\n * - JSON-RPC Methods: [`eth_getFilterLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterlogs)\n *\n * `getFilterLogs` is only compatible with **event filters**.\n *\n * @param client - Client to use\n * @param parameters - {@link GetFilterLogsParameters}\n * @returns A list of event logs. {@link GetFilterLogsReturnType}\n *\n * @example\n * import { createPublicClient, http, parseAbiItem } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createEventFilter, getFilterLogs } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const filter = await createEventFilter(client, {\n *   address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n *   event: parseAbiItem('event Transfer(address indexed, address indexed, uint256)'),\n * })\n * const logs = await getFilterLogs(client, { filter })\n */\nexport async function getFilterLogs(_client, _ref) {\n  let {\n    filter\n  } = _ref;\n  const strict = filter.strict ?? false;\n  const logs = await filter.request({\n    method: 'eth_getFilterLogs',\n    params: [filter.id]\n  });\n  return logs.map(log => {\n    try {\n      const {\n        eventName,\n        args\n      } = 'abi' in filter && filter.abi ? decodeEventLog({\n        abi: filter.abi,\n        data: log.data,\n        topics: log.topics,\n        strict\n      }) : {\n        eventName: undefined,\n        args: undefined\n      };\n      return formatLog(log, {\n        args,\n        eventName\n      });\n    } catch (err) {\n      let eventName;\n      let isUnnamed;\n      if (err instanceof DecodeLogDataMismatch || err instanceof DecodeLogTopicsMismatch) {\n        // If strict mode is on, and log data/topics do not match event definition, skip.\n        if ('strict' in filter && filter.strict) return;\n        eventName = err.abiItem.name;\n        isUnnamed = err.abiItem.inputs?.some(x => !('name' in x && x.name));\n      }\n      // Set args to empty if there is an error decoding (e.g. indexed/non-indexed params mismatch).\n      return formatLog(log, {\n        args: isUnnamed ? [] : {},\n        eventName\n      });\n    }\n  }).filter(Boolean);\n}","map":{"version":3,"names":["DecodeLogDataMismatch","DecodeLogTopicsMismatch","decodeEventLog","formatLog","getFilterLogs","_client","_ref","filter","strict","logs","request","method","params","id","map","log","eventName","args","abi","data","topics","undefined","err","isUnnamed","abiItem","name","inputs","some","x","Boolean"],"sources":["/home/amarjeet/Amarjeet/realwareWeb3/metamask_sign/Dapp-Starter code/node_modules/viem/src/actions/public/getFilterLogs.ts"],"sourcesContent":["import type { Abi, AbiEvent, ExtractAbiEvent } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport {\n  DecodeLogDataMismatch,\n  DecodeLogTopicsMismatch,\n} from '../../errors/abi.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Filter } from '../../types/filter.js'\nimport type { Log } from '../../types/log.js'\nimport { decodeEventLog } from '../../utils/abi/decodeEventLog.js'\nimport { formatLog } from '../../utils/formatters/log.js'\n\nexport type GetFilterLogsParameters<\n  TAbi extends Abi | readonly unknown[] = Abi,\n  TEventName extends string | undefined = string,\n  TStrict extends boolean | undefined = undefined,\n> = {\n  filter: Filter<'event', TAbi, TEventName, any, TStrict>\n}\nexport type GetFilterLogsReturnType<\n  TAbi extends Abi | readonly unknown[] = Abi,\n  TEventName extends string | undefined = string,\n  TStrict extends boolean | undefined = undefined,\n  _AbiEvent extends AbiEvent | undefined = TAbi extends Abi\n    ? TEventName extends string\n      ? ExtractAbiEvent<TAbi, TEventName>\n      : undefined\n    : undefined,\n> = Log<bigint, number, _AbiEvent, TStrict, TAbi, TEventName>[]\n\n/**\n * Returns a list of event logs since the filter was created.\n *\n * - Docs: https://viem.sh/docs/actions/public/getFilterLogs.html\n * - JSON-RPC Methods: [`eth_getFilterLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterlogs)\n *\n * `getFilterLogs` is only compatible with **event filters**.\n *\n * @param client - Client to use\n * @param parameters - {@link GetFilterLogsParameters}\n * @returns A list of event logs. {@link GetFilterLogsReturnType}\n *\n * @example\n * import { createPublicClient, http, parseAbiItem } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createEventFilter, getFilterLogs } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const filter = await createEventFilter(client, {\n *   address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n *   event: parseAbiItem('event Transfer(address indexed, address indexed, uint256)'),\n * })\n * const logs = await getFilterLogs(client, { filter })\n */\nexport async function getFilterLogs<\n  TChain extends Chain | undefined,\n  TAbi extends Abi | readonly unknown[],\n  TEventName extends string | undefined,\n  TStrict extends boolean | undefined = undefined,\n>(\n  _client: Client<Transport, TChain>,\n  { filter }: GetFilterLogsParameters<TAbi, TEventName, TStrict>,\n): Promise<GetFilterLogsReturnType<TAbi, TEventName, TStrict>> {\n  const strict = filter.strict ?? false\n\n  const logs = await filter.request({\n    method: 'eth_getFilterLogs',\n    params: [filter.id],\n  })\n  return logs\n    .map((log) => {\n      try {\n        const { eventName, args } =\n          'abi' in filter && filter.abi\n            ? decodeEventLog({\n                abi: filter.abi,\n                data: log.data,\n                topics: log.topics as any,\n                strict,\n              })\n            : { eventName: undefined, args: undefined }\n        return formatLog(log, { args, eventName })\n      } catch (err) {\n        let eventName\n        let isUnnamed\n        if (\n          err instanceof DecodeLogDataMismatch ||\n          err instanceof DecodeLogTopicsMismatch\n        ) {\n          // If strict mode is on, and log data/topics do not match event definition, skip.\n          if ('strict' in filter && filter.strict) return\n          eventName = err.abiItem.name\n          isUnnamed = err.abiItem.inputs?.some((x) => !('name' in x && x.name))\n        }\n\n        // Set args to empty if there is an error decoding (e.g. indexed/non-indexed params mismatch).\n        return formatLog(log, { args: isUnnamed ? [] : {}, eventName })\n      }\n    })\n    .filter(Boolean) as unknown as GetFilterLogsReturnType<\n    TAbi,\n    TEventName,\n    TStrict\n  >\n}\n"],"mappings":"AAIA,SACEA,qBAAqB,EACrBC,uBAAuB,QAClB,qBAAqB;AAI5B,SAASC,cAAc,QAAQ,mCAAmC;AAClE,SAASC,SAAS,QAAQ,+BAA+B;AAoBzD;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,OAAO,eAAeC,aAAaA,CAMjCC,OAAkC,EAAAC,IAAA,EAC4B;EAAA,IAA9D;IAAEC;EAAM,CAAsD,GAAAD,IAAA;EAE9D,MAAME,MAAM,GAAGD,MAAM,CAACC,MAAM,IAAI,KAAK;EAErC,MAAMC,IAAI,GAAG,MAAMF,MAAM,CAACG,OAAO,CAAC;IAChCC,MAAM,EAAE,mBAAmB;IAC3BC,MAAM,EAAE,CAACL,MAAM,CAACM,EAAE;GACnB,CAAC;EACF,OAAOJ,IAAI,CACRK,GAAG,CAAEC,GAAG,IAAI;IACX,IAAI;MACF,MAAM;QAAEC,SAAS;QAAEC;MAAI,CAAE,GACvB,KAAK,IAAIV,MAAM,IAAIA,MAAM,CAACW,GAAG,GACzBhB,cAAc,CAAC;QACbgB,GAAG,EAAEX,MAAM,CAACW,GAAG;QACfC,IAAI,EAAEJ,GAAG,CAACI,IAAI;QACdC,MAAM,EAAEL,GAAG,CAACK,MAAa;QACzBZ;OACD,CAAC,GACF;QAAEQ,SAAS,EAAEK,SAAS;QAAEJ,IAAI,EAAEI;MAAS,CAAE;MAC/C,OAAOlB,SAAS,CAACY,GAAG,EAAE;QAAEE,IAAI;QAAED;MAAS,CAAE,CAAC;KAC3C,CAAC,OAAOM,GAAG,EAAE;MACZ,IAAIN,SAAS;MACb,IAAIO,SAAS;MACb,IACED,GAAG,YAAYtB,qBAAqB,IACpCsB,GAAG,YAAYrB,uBAAuB,EACtC;QACA;QACA,IAAI,QAAQ,IAAIM,MAAM,IAAIA,MAAM,CAACC,MAAM,EAAE;QACzCQ,SAAS,GAAGM,GAAG,CAACE,OAAO,CAACC,IAAI;QAC5BF,SAAS,GAAGD,GAAG,CAACE,OAAO,CAACE,MAAM,EAAEC,IAAI,CAAEC,CAAC,IAAK,EAAE,MAAM,IAAIA,CAAC,IAAIA,CAAC,CAACH,IAAI,CAAC,CAAC;;MAGvE;MACA,OAAOtB,SAAS,CAACY,GAAG,EAAE;QAAEE,IAAI,EAAEM,SAAS,GAAG,EAAE,GAAG,EAAE;QAAEP;MAAS,CAAE,CAAC;;EAEnE,CAAC,CAAC,CACDT,MAAM,CAACsB,OAAO,CAIhB;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}