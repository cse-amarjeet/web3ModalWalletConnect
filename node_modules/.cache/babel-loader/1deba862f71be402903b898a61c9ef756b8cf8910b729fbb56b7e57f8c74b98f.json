{"ast":null,"code":"import { CallExecutionError } from '../../errors/contract.js';\nimport { containsNodeError, getNodeError } from './getNodeError.js';\nexport function getCallError(err, _ref) {\n  let {\n    docsPath,\n    ...args\n  } = _ref;\n  let cause = err;\n  if (containsNodeError(err)) cause = getNodeError(err, args);\n  return new CallExecutionError(cause, {\n    docsPath,\n    ...args\n  });\n}","map":{"version":3,"names":["CallExecutionError","containsNodeError","getNodeError","getCallError","err","_ref","docsPath","args","cause"],"sources":["/home/amarjeet/Amarjeet/realwareWeb3/metamask_sign/Dapp-Starter code/node_modules/viem/src/utils/errors/getCallError.ts"],"sourcesContent":["import type { CallParameters } from '../../actions/public/call.js'\nimport type { BaseError } from '../../errors/base.js'\nimport { CallExecutionError } from '../../errors/contract.js'\nimport type { Chain } from '../../types/chain.js'\n\nimport {\n  type GetNodeErrorParameters,\n  containsNodeError,\n  getNodeError,\n} from './getNodeError.js'\n\nexport function getCallError(\n  err: BaseError,\n  {\n    docsPath,\n    ...args\n  }: CallParameters & {\n    chain?: Chain\n    docsPath?: string\n  },\n) {\n  let cause = err\n  if (containsNodeError(err))\n    cause = getNodeError(err, args as GetNodeErrorParameters)\n  return new CallExecutionError(cause, {\n    docsPath,\n    ...args,\n  })\n}\n"],"mappings":"AAEA,SAASA,kBAAkB,QAAQ,0BAA0B;AAG7D,SAEEC,iBAAiB,EACjBC,YAAY,QACP,mBAAmB;AAE1B,OAAM,SAAUC,YAAYA,CAC1BC,GAAc,EAAAC,IAAA,EAOb;EAAA,IAND;IACEC,QAAQ;IACR,GAAGC;EAAI,CAIR,GAAAF,IAAA;EAED,IAAIG,KAAK,GAAGJ,GAAG;EACf,IAAIH,iBAAiB,CAACG,GAAG,CAAC,EACxBI,KAAK,GAAGN,YAAY,CAACE,GAAG,EAAEG,IAA8B,CAAC;EAC3D,OAAO,IAAIP,kBAAkB,CAACQ,KAAK,EAAE;IACnCF,QAAQ;IACR,GAAGC;GACJ,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}