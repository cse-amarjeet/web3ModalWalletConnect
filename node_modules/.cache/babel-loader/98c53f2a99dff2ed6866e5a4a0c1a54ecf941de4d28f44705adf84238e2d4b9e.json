{"ast":null,"code":"import { observe } from '../../utils/observe.js';\nimport { poll } from '../../utils/poll.js';\nimport { stringify } from '../../utils/stringify.js';\nimport { createEventFilter } from './createEventFilter.js';\nimport { getBlockNumber } from './getBlockNumber.js';\nimport { getFilterChanges } from './getFilterChanges.js';\nimport { getLogs } from './getLogs.js';\nimport { uninstallFilter } from './uninstallFilter.js';\n/**\n * Watches and returns emitted [Event Logs](https://viem.sh/docs/glossary/terms.html#event-log).\n *\n * - Docs: https://viem.sh/docs/actions/public/watchEvent.html\n * - JSON-RPC Methods:\n *   - **RPC Provider supports `eth_newFilter`:**\n *     - Calls [`eth_newFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newfilter) to create a filter (called on initialize).\n *     - On a polling interval, it will call [`eth_getFilterChanges`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterchanges).\n *   - **RPC Provider does not support `eth_newFilter`:**\n *     - Calls [`eth_getLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getlogs) for each block between the polling interval.\n *\n * This Action will batch up all the Event Logs found within the [`pollingInterval`](https://viem.sh/docs/actions/public/watchEvent.html#pollinginterval-optional), and invoke them via [`onLogs`](https://viem.sh/docs/actions/public/watchEvent.html#onLogs).\n *\n * `watchEvent` will attempt to create an [Event Filter](https://viem.sh/docs/actions/public/createEventFilter.html) and listen to changes to the Filter per polling interval, however, if the RPC Provider does not support Filters (e.g. `eth_newFilter`), then `watchEvent` will fall back to using [`getLogs`](https://viem.sh/docs/actions/public/getLogs.html) instead.\n *\n * @param client - Client to use\n * @param parameters - {@link WatchEventParameters}\n * @returns A function that can be invoked to stop watching for new Event Logs. {@link WatchEventReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { watchEvent } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const unwatch = watchEvent(client, {\n *   onLogs: (logs) => console.log(logs),\n * })\n */\nexport function watchEvent(client, _ref) {\n  let {\n    address,\n    args,\n    batch = true,\n    event,\n    onError,\n    onLogs,\n    pollingInterval = client.pollingInterval,\n    strict: strict_\n  } = _ref;\n  const observerId = stringify(['watchEvent', address, args, batch, client.uid, event, pollingInterval]);\n  const strict = strict_ ?? false;\n  return observe(observerId, {\n    onLogs,\n    onError\n  }, emit => {\n    let previousBlockNumber;\n    let filter;\n    let initialized = false;\n    const unwatch = poll(async () => {\n      if (!initialized) {\n        try {\n          filter = await createEventFilter(client, {\n            address,\n            args,\n            event: event,\n            strict\n          });\n        } catch {}\n        initialized = true;\n        return;\n      }\n      try {\n        let logs;\n        if (filter) {\n          logs = await getFilterChanges(client, {\n            filter\n          });\n        } else {\n          // If the filter doesn't exist, we will fall back to use `getLogs`.\n          // The fall back exists because some RPC Providers do not support filters.\n          // Fetch the block number to use for `getLogs`.\n          const blockNumber = await getBlockNumber(client);\n          // If the block number has changed, we will need to fetch the logs.\n          // If the block number doesn't exist, we are yet to reach the first poll interval,\n          // so do not emit any logs.\n          if (previousBlockNumber && previousBlockNumber !== blockNumber) {\n            logs = await getLogs(client, {\n              address,\n              args,\n              fromBlock: previousBlockNumber + 1n,\n              toBlock: blockNumber,\n              event: event\n            });\n          } else {\n            logs = [];\n          }\n          previousBlockNumber = blockNumber;\n        }\n        if (logs.length === 0) return;\n        if (batch) emit.onLogs(logs);else logs.forEach(log => emit.onLogs([log]));\n      } catch (err) {\n        emit.onError?.(err);\n      }\n    }, {\n      emitOnBegin: true,\n      interval: pollingInterval\n    });\n    return async () => {\n      if (filter) await uninstallFilter(client, {\n        filter\n      });\n      unwatch();\n    };\n  });\n}","map":{"version":3,"names":["observe","poll","stringify","createEventFilter","getBlockNumber","getFilterChanges","getLogs","uninstallFilter","watchEvent","client","_ref","address","args","batch","event","onError","onLogs","pollingInterval","strict","strict_","observerId","uid","emit","previousBlockNumber","filter","initialized","unwatch","logs","blockNumber","fromBlock","toBlock","length","forEach","log","err","emitOnBegin","interval"],"sources":["/home/amarjeet/Amarjeet/realwareWeb3/metamask_sign/Dapp-Starter code/node_modules/viem/src/actions/public/watchEvent.ts"],"sourcesContent":["import type { AbiEvent, Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { Chain } from '../../types/chain.js'\nimport type {\n  MaybeAbiEventName,\n  MaybeExtractEventArgsFromAbi,\n} from '../../types/contract.js'\nimport type { Filter } from '../../types/filter.js'\nimport type { Log } from '../../types/log.js'\nimport { observe } from '../../utils/observe.js'\nimport { poll } from '../../utils/poll.js'\nimport { stringify } from '../../utils/stringify.js'\n\nimport {\n  type CreateEventFilterParameters,\n  createEventFilter,\n} from './createEventFilter.js'\nimport { getBlockNumber } from './getBlockNumber.js'\nimport { getFilterChanges } from './getFilterChanges.js'\nimport { getLogs } from './getLogs.js'\nimport { uninstallFilter } from './uninstallFilter.js'\n\nexport type OnLogsParameter<\n  TAbiEvent extends AbiEvent | undefined = undefined,\n  TStrict extends boolean | undefined = undefined,\n  TEventName extends string | undefined = MaybeAbiEventName<TAbiEvent>,\n> = Log<bigint, number, TAbiEvent, TStrict, [TAbiEvent], TEventName>[]\nexport type OnLogsFn<\n  TAbiEvent extends AbiEvent | undefined = undefined,\n  TStrict extends boolean | undefined = undefined,\n  TEventName extends string | undefined = MaybeAbiEventName<TAbiEvent>,\n> = (logs: OnLogsParameter<TAbiEvent, TStrict, TEventName>) => void\n\nexport type WatchEventParameters<\n  TAbiEvent extends AbiEvent | undefined = undefined,\n  TStrict extends boolean | undefined = undefined,\n  TEventName extends string | undefined = MaybeAbiEventName<TAbiEvent>,\n> = {\n  /** The address of the contract. */\n  address?: Address | Address[]\n  /**\n   * Whether or not the event logs should be batched on each invocation.\n   * @default true\n   */\n  batch?: boolean\n  /** The callback to call when an error occurred when trying to get for a new block. */\n  onError?: (error: Error) => void\n  /** The callback to call when new event logs are received. */\n  onLogs: OnLogsFn<TAbiEvent, TStrict, TEventName>\n  /** Polling frequency (in ms). Defaults to Client's pollingInterval config. */\n  pollingInterval?: number\n} & (\n  | {\n      event: TAbiEvent\n      args?: MaybeExtractEventArgsFromAbi<[TAbiEvent], TEventName>\n      /**\n       * Whether or not the logs must match the indexed/non-indexed arguments on `event`.\n       * @default false\n       */\n      strict?: TStrict\n    }\n  | {\n      event?: never\n      args?: never\n      strict?: never\n    }\n)\n\nexport type WatchEventReturnType = () => void\n\n/**\n * Watches and returns emitted [Event Logs](https://viem.sh/docs/glossary/terms.html#event-log).\n *\n * - Docs: https://viem.sh/docs/actions/public/watchEvent.html\n * - JSON-RPC Methods:\n *   - **RPC Provider supports `eth_newFilter`:**\n *     - Calls [`eth_newFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newfilter) to create a filter (called on initialize).\n *     - On a polling interval, it will call [`eth_getFilterChanges`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterchanges).\n *   - **RPC Provider does not support `eth_newFilter`:**\n *     - Calls [`eth_getLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getlogs) for each block between the polling interval.\n *\n * This Action will batch up all the Event Logs found within the [`pollingInterval`](https://viem.sh/docs/actions/public/watchEvent.html#pollinginterval-optional), and invoke them via [`onLogs`](https://viem.sh/docs/actions/public/watchEvent.html#onLogs).\n *\n * `watchEvent` will attempt to create an [Event Filter](https://viem.sh/docs/actions/public/createEventFilter.html) and listen to changes to the Filter per polling interval, however, if the RPC Provider does not support Filters (e.g. `eth_newFilter`), then `watchEvent` will fall back to using [`getLogs`](https://viem.sh/docs/actions/public/getLogs.html) instead.\n *\n * @param client - Client to use\n * @param parameters - {@link WatchEventParameters}\n * @returns A function that can be invoked to stop watching for new Event Logs. {@link WatchEventReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { watchEvent } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const unwatch = watchEvent(client, {\n *   onLogs: (logs) => console.log(logs),\n * })\n */\nexport function watchEvent<\n  TChain extends Chain | undefined,\n  TAbiEvent extends AbiEvent | undefined,\n  TEventName extends string | undefined,\n  TStrict extends boolean | undefined = undefined,\n>(\n  client: Client<Transport, TChain>,\n  {\n    address,\n    args,\n    batch = true,\n    event,\n    onError,\n    onLogs,\n    pollingInterval = client.pollingInterval,\n    strict: strict_,\n  }: WatchEventParameters<TAbiEvent, TStrict>,\n): WatchEventReturnType {\n  const observerId = stringify([\n    'watchEvent',\n    address,\n    args,\n    batch,\n    client.uid,\n    event,\n    pollingInterval,\n  ])\n  const strict = strict_ ?? false\n\n  return observe(observerId, { onLogs, onError }, (emit) => {\n    let previousBlockNumber: bigint\n    let filter: Filter<'event', [TAbiEvent], TEventName, any>\n    let initialized = false\n\n    const unwatch = poll(\n      async () => {\n        if (!initialized) {\n          try {\n            filter = (await createEventFilter(client, {\n              address,\n              args,\n              event: event!,\n              strict,\n            } as unknown as CreateEventFilterParameters)) as unknown as Filter<\n              'event',\n              [TAbiEvent],\n              TEventName\n            >\n          } catch {}\n          initialized = true\n          return\n        }\n\n        try {\n          let logs: Log[]\n          if (filter) {\n            logs = await getFilterChanges(client, { filter })\n          } else {\n            // If the filter doesn't exist, we will fall back to use `getLogs`.\n            // The fall back exists because some RPC Providers do not support filters.\n\n            // Fetch the block number to use for `getLogs`.\n            const blockNumber = await getBlockNumber(client)\n\n            // If the block number has changed, we will need to fetch the logs.\n            // If the block number doesn't exist, we are yet to reach the first poll interval,\n            // so do not emit any logs.\n            if (previousBlockNumber && previousBlockNumber !== blockNumber) {\n              logs = await getLogs(client, {\n                address,\n                args,\n                fromBlock: previousBlockNumber + 1n,\n                toBlock: blockNumber,\n                event: event!,\n              })\n            } else {\n              logs = []\n            }\n            previousBlockNumber = blockNumber\n          }\n\n          if (logs.length === 0) return\n          if (batch) emit.onLogs(logs as any)\n          else logs.forEach((log) => emit.onLogs([log] as any))\n        } catch (err) {\n          emit.onError?.(err as Error)\n        }\n      },\n      {\n        emitOnBegin: true,\n        interval: pollingInterval,\n      },\n    )\n\n    return async () => {\n      if (filter) await uninstallFilter(client, { filter })\n      unwatch()\n    }\n  })\n}\n"],"mappings":"AAWA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,IAAI,QAAQ,qBAAqB;AAC1C,SAASC,SAAS,QAAQ,0BAA0B;AAEpD,SAEEC,iBAAiB,QACZ,wBAAwB;AAC/B,SAASC,cAAc,QAAQ,qBAAqB;AACpD,SAASC,gBAAgB,QAAQ,uBAAuB;AACxD,SAASC,OAAO,QAAQ,cAAc;AACtC,SAASC,eAAe,QAAQ,sBAAsB;AAkDtD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA,OAAM,SAAUC,UAAUA,CAMxBC,MAAiC,EAAAC,IAAA,EAUU;EAAA,IAT3C;IACEC,OAAO;IACPC,IAAI;IACJC,KAAK,GAAG,IAAI;IACZC,KAAK;IACLC,OAAO;IACPC,MAAM;IACNC,eAAe,GAAGR,MAAM,CAACQ,eAAe;IACxCC,MAAM,EAAEC;EAAO,CAC0B,GAAAT,IAAA;EAE3C,MAAMU,UAAU,GAAGlB,SAAS,CAAC,CAC3B,YAAY,EACZS,OAAO,EACPC,IAAI,EACJC,KAAK,EACLJ,MAAM,CAACY,GAAG,EACVP,KAAK,EACLG,eAAe,CAChB,CAAC;EACF,MAAMC,MAAM,GAAGC,OAAO,IAAI,KAAK;EAE/B,OAAOnB,OAAO,CAACoB,UAAU,EAAE;IAAEJ,MAAM;IAAED;EAAO,CAAE,EAAGO,IAAI,IAAI;IACvD,IAAIC,mBAA2B;IAC/B,IAAIC,MAAqD;IACzD,IAAIC,WAAW,GAAG,KAAK;IAEvB,MAAMC,OAAO,GAAGzB,IAAI,CAClB,YAAW;MACT,IAAI,CAACwB,WAAW,EAAE;QAChB,IAAI;UACFD,MAAM,GAAI,MAAMrB,iBAAiB,CAACM,MAAM,EAAE;YACxCE,OAAO;YACPC,IAAI;YACJE,KAAK,EAAEA,KAAM;YACbI;WACyC,CAI1C;SACF,CAAC,MAAM;QACRO,WAAW,GAAG,IAAI;QAClB;;MAGF,IAAI;QACF,IAAIE,IAAW;QACf,IAAIH,MAAM,EAAE;UACVG,IAAI,GAAG,MAAMtB,gBAAgB,CAACI,MAAM,EAAE;YAAEe;UAAM,CAAE,CAAC;SAClD,MAAM;UACL;UACA;UAEA;UACA,MAAMI,WAAW,GAAG,MAAMxB,cAAc,CAACK,MAAM,CAAC;UAEhD;UACA;UACA;UACA,IAAIc,mBAAmB,IAAIA,mBAAmB,KAAKK,WAAW,EAAE;YAC9DD,IAAI,GAAG,MAAMrB,OAAO,CAACG,MAAM,EAAE;cAC3BE,OAAO;cACPC,IAAI;cACJiB,SAAS,EAAEN,mBAAmB,GAAG,EAAE;cACnCO,OAAO,EAAEF,WAAW;cACpBd,KAAK,EAAEA;aACR,CAAC;WACH,MAAM;YACLa,IAAI,GAAG,EAAE;;UAEXJ,mBAAmB,GAAGK,WAAW;;QAGnC,IAAID,IAAI,CAACI,MAAM,KAAK,CAAC,EAAE;QACvB,IAAIlB,KAAK,EAAES,IAAI,CAACN,MAAM,CAACW,IAAW,CAAC,MAC9BA,IAAI,CAACK,OAAO,CAAEC,GAAG,IAAKX,IAAI,CAACN,MAAM,CAAC,CAACiB,GAAG,CAAQ,CAAC,CAAC;OACtD,CAAC,OAAOC,GAAG,EAAE;QACZZ,IAAI,CAACP,OAAO,GAAGmB,GAAY,CAAC;;IAEhC,CAAC,EACD;MACEC,WAAW,EAAE,IAAI;MACjBC,QAAQ,EAAEnB;KACX,CACF;IAED,OAAO,YAAW;MAChB,IAAIO,MAAM,EAAE,MAAMjB,eAAe,CAACE,MAAM,EAAE;QAAEe;MAAM,CAAE,CAAC;MACrDE,OAAO,EAAE;IACX,CAAC;EACH,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}