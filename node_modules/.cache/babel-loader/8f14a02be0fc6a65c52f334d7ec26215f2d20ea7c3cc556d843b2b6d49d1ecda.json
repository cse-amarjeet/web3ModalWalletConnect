{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport { noChange } from '../lit-html.js';\nimport { directive, Directive, PartType } from '../directive.js';\nclass ClassMapDirective extends Directive {\n  constructor(partInfo) {\n    var _a;\n    super(partInfo);\n    if (partInfo.type !== PartType.ATTRIBUTE || partInfo.name !== 'class' || ((_a = partInfo.strings) === null || _a === void 0 ? void 0 : _a.length) > 2) {\n      throw new Error('`classMap()` can only be used in the `class` attribute ' + 'and must be the only part in the attribute.');\n    }\n  }\n  render(classInfo) {\n    // Add spaces to ensure separation from static classes\n    return ' ' + Object.keys(classInfo).filter(key => classInfo[key]).join(' ') + ' ';\n  }\n  update(part, _ref) {\n    let [classInfo] = _ref;\n    var _a, _b;\n    // Remember dynamic classes on the first render\n    if (this._previousClasses === undefined) {\n      this._previousClasses = new Set();\n      if (part.strings !== undefined) {\n        this._staticClasses = new Set(part.strings.join(' ').split(/\\s/).filter(s => s !== ''));\n      }\n      for (const name in classInfo) {\n        if (classInfo[name] && !((_a = this._staticClasses) === null || _a === void 0 ? void 0 : _a.has(name))) {\n          this._previousClasses.add(name);\n        }\n      }\n      return this.render(classInfo);\n    }\n    const classList = part.element.classList;\n    // Remove old classes that no longer apply\n    // We use forEach() instead of for-of so that we don't require down-level\n    // iteration.\n    this._previousClasses.forEach(name => {\n      if (!(name in classInfo)) {\n        classList.remove(name);\n        this._previousClasses.delete(name);\n      }\n    });\n    // Add or remove classes based on their classMap value\n    for (const name in classInfo) {\n      // We explicitly want a loose truthy check of `value` because it seems\n      // more convenient that '' and 0 are skipped.\n      const value = !!classInfo[name];\n      if (value !== this._previousClasses.has(name) && !((_b = this._staticClasses) === null || _b === void 0 ? void 0 : _b.has(name))) {\n        if (value) {\n          classList.add(name);\n          this._previousClasses.add(name);\n        } else {\n          classList.remove(name);\n          this._previousClasses.delete(name);\n        }\n      }\n    }\n    return noChange;\n  }\n}\n/**\n * A directive that applies dynamic CSS classes.\n *\n * This must be used in the `class` attribute and must be the only part used in\n * the attribute. It takes each property in the `classInfo` argument and adds\n * the property name to the element's `classList` if the property value is\n * truthy; if the property value is falsey, the property name is removed from\n * the element's `class`.\n *\n * For example `{foo: bar}` applies the class `foo` if the value of `bar` is\n * truthy.\n *\n * @param classInfo\n */\nexport const classMap = directive(ClassMapDirective);","map":{"version":3,"names":["noChange","directive","Directive","PartType","ClassMapDirective","constructor","partInfo","type","ATTRIBUTE","name","_a","strings","length","Error","render","classInfo","Object","keys","filter","key","join","update","part","_ref","_previousClasses","undefined","Set","_staticClasses","split","s","has","add","classList","element","forEach","remove","delete","value","_b","classMap"],"sources":["/home/amarjeet/Amarjeet/realwareWeb3/metamask_sign/Dapp-Starter code/node_modules/lit-html/src/directives/class-map.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {AttributePart, noChange} from '../lit-html.js';\nimport {\n  directive,\n  Directive,\n  DirectiveParameters,\n  PartInfo,\n  PartType,\n} from '../directive.js';\n\n/**\n * A key-value set of class names to truthy values.\n */\nexport interface ClassInfo {\n  readonly [name: string]: string | boolean | number;\n}\n\nclass ClassMapDirective extends Directive {\n  /**\n   * Stores the ClassInfo object applied to a given AttributePart.\n   * Used to unset existing values when a new ClassInfo object is applied.\n   */\n  private _previousClasses?: Set<string>;\n  private _staticClasses?: Set<string>;\n\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n    if (\n      partInfo.type !== PartType.ATTRIBUTE ||\n      partInfo.name !== 'class' ||\n      (partInfo.strings?.length as number) > 2\n    ) {\n      throw new Error(\n        '`classMap()` can only be used in the `class` attribute ' +\n          'and must be the only part in the attribute.'\n      );\n    }\n  }\n\n  render(classInfo: ClassInfo) {\n    // Add spaces to ensure separation from static classes\n    return (\n      ' ' +\n      Object.keys(classInfo)\n        .filter((key) => classInfo[key])\n        .join(' ') +\n      ' '\n    );\n  }\n\n  override update(part: AttributePart, [classInfo]: DirectiveParameters<this>) {\n    // Remember dynamic classes on the first render\n    if (this._previousClasses === undefined) {\n      this._previousClasses = new Set();\n      if (part.strings !== undefined) {\n        this._staticClasses = new Set(\n          part.strings\n            .join(' ')\n            .split(/\\s/)\n            .filter((s) => s !== '')\n        );\n      }\n      for (const name in classInfo) {\n        if (classInfo[name] && !this._staticClasses?.has(name)) {\n          this._previousClasses.add(name);\n        }\n      }\n      return this.render(classInfo);\n    }\n\n    const classList = part.element.classList;\n\n    // Remove old classes that no longer apply\n    // We use forEach() instead of for-of so that we don't require down-level\n    // iteration.\n    this._previousClasses.forEach((name) => {\n      if (!(name in classInfo)) {\n        classList.remove(name);\n        this._previousClasses!.delete(name);\n      }\n    });\n\n    // Add or remove classes based on their classMap value\n    for (const name in classInfo) {\n      // We explicitly want a loose truthy check of `value` because it seems\n      // more convenient that '' and 0 are skipped.\n      const value = !!classInfo[name];\n      if (\n        value !== this._previousClasses.has(name) &&\n        !this._staticClasses?.has(name)\n      ) {\n        if (value) {\n          classList.add(name);\n          this._previousClasses.add(name);\n        } else {\n          classList.remove(name);\n          this._previousClasses.delete(name);\n        }\n      }\n    }\n    return noChange;\n  }\n}\n\n/**\n * A directive that applies dynamic CSS classes.\n *\n * This must be used in the `class` attribute and must be the only part used in\n * the attribute. It takes each property in the `classInfo` argument and adds\n * the property name to the element's `classList` if the property value is\n * truthy; if the property value is falsey, the property name is removed from\n * the element's `class`.\n *\n * For example `{foo: bar}` applies the class `foo` if the value of `bar` is\n * truthy.\n *\n * @param classInfo\n */\nexport const classMap = directive(ClassMapDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {ClassMapDirective};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}