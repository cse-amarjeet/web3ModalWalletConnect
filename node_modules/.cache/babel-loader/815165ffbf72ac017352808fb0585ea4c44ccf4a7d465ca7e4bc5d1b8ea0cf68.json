{"ast":null,"code":"import '../../types/formatter.js';\nimport { hexToBigInt } from '../../utils/encoding/fromHex.js';\nimport { numberToHex } from '../../utils/encoding/toHex.js';\nimport { defineBlock } from '../../utils/formatters/block.js';\nimport { defineTransaction, formatTransaction } from '../../utils/formatters/transaction.js';\nimport { defineTransactionReceipt } from '../../utils/formatters/transactionReceipt.js';\nimport { defineTransactionRequest } from '../../utils/formatters/transactionRequest.js';\nexport const formattersCelo = {\n  block: /*#__PURE__*/defineBlock({\n    exclude: ['difficulty', 'gasLimit', 'mixHash', 'nonce', 'uncles'],\n    format(args) {\n      const transactions = args.transactions?.map(transaction => {\n        if (typeof transaction === 'string') return transaction;\n        return {\n          ...formatTransaction(transaction),\n          feeCurrency: transaction.feeCurrency,\n          gatewayFee: transaction.gatewayFee ? hexToBigInt(transaction.gatewayFee) : null,\n          gatewayFeeRecipient: transaction.gatewayFeeRecipient\n        };\n      });\n      return {\n        randomness: args.randomness,\n        transactions\n      };\n    }\n  }),\n  transaction: /*#__PURE__*/defineTransaction({\n    format(args) {\n      return {\n        feeCurrency: args.feeCurrency,\n        gatewayFee: args.gatewayFee ? hexToBigInt(args.gatewayFee) : null,\n        gatewayFeeRecipient: args.gatewayFeeRecipient\n      };\n    }\n  }),\n  transactionReceipt: /*#__PURE__*/defineTransactionReceipt({\n    format(args) {\n      return {\n        feeCurrency: args.feeCurrency,\n        gatewayFee: args.gatewayFee ? hexToBigInt(args.gatewayFee) : null,\n        gatewayFeeRecipient: args.gatewayFeeRecipient\n      };\n    }\n  }),\n  transactionRequest: /*#__PURE__*/defineTransactionRequest({\n    format(args) {\n      return {\n        feeCurrency: args.feeCurrency,\n        gatewayFee: typeof args.gatewayFee !== 'undefined' ? numberToHex(args.gatewayFee) : undefined,\n        gatewayFeeRecipient: args.gatewayFeeRecipient\n      };\n    }\n  })\n};","map":{"version":3,"names":["hexToBigInt","numberToHex","defineBlock","defineTransaction","formatTransaction","defineTransactionReceipt","defineTransactionRequest","formattersCelo","block","exclude","format","args","transactions","map","transaction","feeCurrency","gatewayFee","gatewayFeeRecipient","randomness","transactionReceipt","transactionRequest","undefined"],"sources":["/home/amarjeet/Amarjeet/realwareWeb3/metamask_sign/Dapp-Starter code/node_modules/viem/src/chains/formatters/celo.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport { type Formatters } from '../../types/formatter.js'\nimport type { Hash, Hex } from '../../types/misc.js'\nimport type { RpcTransaction } from '../../types/rpc.js'\nimport type { Transaction } from '../../types/transaction.js'\nimport { hexToBigInt } from '../../utils/encoding/fromHex.js'\nimport { numberToHex } from '../../utils/encoding/toHex.js'\nimport { defineBlock } from '../../utils/formatters/block.js'\nimport {\n  defineTransaction,\n  formatTransaction,\n} from '../../utils/formatters/transaction.js'\nimport { defineTransactionReceipt } from '../../utils/formatters/transactionReceipt.js'\nimport { defineTransactionRequest } from '../../utils/formatters/transactionRequest.js'\n\nexport type CeloFormatOverrides = {\n  RpcBlock: {\n    randomness: {\n      committed: Hex\n      revealed: Hex\n    }\n    transactions:\n      | Hash[]\n      | (RpcTransaction & {\n          feeCurrency: Address | null\n          gatewayFee: Hex | null\n          gatewayFeeRecipient: Address | null\n        })[]\n  }\n  RpcTransaction: {\n    feeCurrency: Address | null\n    gatewayFee: Hex | null\n    gatewayFeeRecipient: Address | null\n  }\n  RpcTransactionReceipt: {\n    feeCurrency: Address | null\n    gatewayFee: Hex | null\n    gatewayFeeRecipient: Address | null\n  }\n  TransactionRequest: {\n    feeCurrency?: Address\n    gatewayFee?: bigint\n    gatewayFeeRecipient?: Address\n  }\n  Transaction: {\n    feeCurrency: Address | null\n    gatewayFee: bigint | null\n    gatewayFeeRecipient: Address | null\n  }\n}\n\nexport const formattersCelo = {\n  block: /*#__PURE__*/ defineBlock({\n    exclude: ['difficulty', 'gasLimit', 'mixHash', 'nonce', 'uncles'],\n    format(args: CeloFormatOverrides['RpcBlock']) {\n      const transactions = args.transactions?.map((transaction) => {\n        if (typeof transaction === 'string') return transaction\n        return {\n          ...formatTransaction(transaction),\n          feeCurrency: transaction.feeCurrency,\n          gatewayFee: transaction.gatewayFee\n            ? hexToBigInt(transaction.gatewayFee)\n            : null,\n          gatewayFeeRecipient: transaction.gatewayFeeRecipient,\n        }\n      }) as Hash[] | (Transaction & CeloFormatOverrides['Transaction'])[]\n      return {\n        randomness: args.randomness,\n        transactions,\n      }\n    },\n  }),\n  transaction: /*#__PURE__*/ defineTransaction({\n    format(args: CeloFormatOverrides['RpcTransaction']) {\n      return {\n        feeCurrency: args.feeCurrency,\n        gatewayFee: args.gatewayFee ? hexToBigInt(args.gatewayFee) : null,\n        gatewayFeeRecipient: args.gatewayFeeRecipient,\n      }\n    },\n  }),\n  transactionReceipt: /*#__PURE__*/ defineTransactionReceipt({\n    format(args: CeloFormatOverrides['RpcTransactionReceipt']) {\n      return {\n        feeCurrency: args.feeCurrency,\n        gatewayFee: args.gatewayFee ? hexToBigInt(args.gatewayFee) : null,\n        gatewayFeeRecipient: args.gatewayFeeRecipient,\n      }\n    },\n  }),\n  transactionRequest: /*#__PURE__*/ defineTransactionRequest({\n    format(args: CeloFormatOverrides['TransactionRequest']) {\n      return {\n        feeCurrency: args.feeCurrency,\n        gatewayFee:\n          typeof args.gatewayFee !== 'undefined'\n            ? numberToHex(args.gatewayFee)\n            : undefined,\n        gatewayFeeRecipient: args.gatewayFeeRecipient,\n      }\n    },\n  }),\n} as const satisfies Formatters\n"],"mappings":"AAEA,OAAgC,0BAA0B;AAI1D,SAASA,WAAW,QAAQ,iCAAiC;AAC7D,SAASC,WAAW,QAAQ,+BAA+B;AAC3D,SAASC,WAAW,QAAQ,iCAAiC;AAC7D,SACEC,iBAAiB,EACjBC,iBAAiB,QACZ,uCAAuC;AAC9C,SAASC,wBAAwB,QAAQ,8CAA8C;AACvF,SAASC,wBAAwB,QAAQ,8CAA8C;AAsCvF,OAAO,MAAMC,cAAc,GAAG;EAC5BC,KAAK,EAAE,aAAcN,WAAW,CAAC;IAC/BO,OAAO,EAAE,CAAC,YAAY,EAAE,UAAU,EAAE,SAAS,EAAE,OAAO,EAAE,QAAQ,CAAC;IACjEC,MAAMA,CAACC,IAAqC;MAC1C,MAAMC,YAAY,GAAGD,IAAI,CAACC,YAAY,EAAEC,GAAG,CAAEC,WAAW,IAAI;QAC1D,IAAI,OAAOA,WAAW,KAAK,QAAQ,EAAE,OAAOA,WAAW;QACvD,OAAO;UACL,GAAGV,iBAAiB,CAACU,WAAW,CAAC;UACjCC,WAAW,EAAED,WAAW,CAACC,WAAW;UACpCC,UAAU,EAAEF,WAAW,CAACE,UAAU,GAC9BhB,WAAW,CAACc,WAAW,CAACE,UAAU,CAAC,GACnC,IAAI;UACRC,mBAAmB,EAAEH,WAAW,CAACG;SAClC;MACH,CAAC,CAAkE;MACnE,OAAO;QACLC,UAAU,EAAEP,IAAI,CAACO,UAAU;QAC3BN;OACD;IACH;GACD,CAAC;EACFE,WAAW,EAAE,aAAcX,iBAAiB,CAAC;IAC3CO,MAAMA,CAACC,IAA2C;MAChD,OAAO;QACLI,WAAW,EAAEJ,IAAI,CAACI,WAAW;QAC7BC,UAAU,EAAEL,IAAI,CAACK,UAAU,GAAGhB,WAAW,CAACW,IAAI,CAACK,UAAU,CAAC,GAAG,IAAI;QACjEC,mBAAmB,EAAEN,IAAI,CAACM;OAC3B;IACH;GACD,CAAC;EACFE,kBAAkB,EAAE,aAAcd,wBAAwB,CAAC;IACzDK,MAAMA,CAACC,IAAkD;MACvD,OAAO;QACLI,WAAW,EAAEJ,IAAI,CAACI,WAAW;QAC7BC,UAAU,EAAEL,IAAI,CAACK,UAAU,GAAGhB,WAAW,CAACW,IAAI,CAACK,UAAU,CAAC,GAAG,IAAI;QACjEC,mBAAmB,EAAEN,IAAI,CAACM;OAC3B;IACH;GACD,CAAC;EACFG,kBAAkB,EAAE,aAAcd,wBAAwB,CAAC;IACzDI,MAAMA,CAACC,IAA+C;MACpD,OAAO;QACLI,WAAW,EAAEJ,IAAI,CAACI,WAAW;QAC7BC,UAAU,EACR,OAAOL,IAAI,CAACK,UAAU,KAAK,WAAW,GAClCf,WAAW,CAACU,IAAI,CAACK,UAAU,CAAC,GAC5BK,SAAS;QACfJ,mBAAmB,EAAEN,IAAI,CAACM;OAC3B;IACH;GACD;CAC4B"},"metadata":{},"sourceType":"module","externalDependencies":[]}