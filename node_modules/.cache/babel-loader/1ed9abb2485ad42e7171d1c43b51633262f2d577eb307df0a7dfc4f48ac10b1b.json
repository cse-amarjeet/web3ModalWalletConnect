{"ast":null,"code":"import { createTransport } from './createTransport.js';\n/**\n * @description Creates a custom transport given an EIP-1193 compliant `request` attribute.\n */\nexport function custom(provider) {\n  let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    key = 'custom',\n    name = 'Custom Provider',\n    retryDelay\n  } = config;\n  return _ref => {\n    let {\n      retryCount: defaultRetryCount\n    } = _ref;\n    return createTransport({\n      key,\n      name,\n      request: provider.request.bind(provider),\n      retryCount: config.retryCount ?? defaultRetryCount,\n      retryDelay,\n      type: 'custom'\n    });\n  };\n}","map":{"version":3,"names":["createTransport","custom","provider","config","arguments","length","undefined","key","name","retryDelay","_ref","retryCount","defaultRetryCount","request","bind","type"],"sources":["/home/amarjeet/Amarjeet/realwareWeb3/metamask_sign/Dapp-Starter code/node_modules/viem/src/clients/transports/custom.ts"],"sourcesContent":["import {\n  type Transport,\n  type TransportConfig,\n  createTransport,\n} from './createTransport.js'\n\ntype EthereumProvider = { request(...args: any): Promise<any> }\n\nexport type CustomTransportConfig = {\n  /** The key of the transport. */\n  key?: TransportConfig['key']\n  /** The name of the transport. */\n  name?: TransportConfig['name']\n  /** The max number of times to retry. */\n  retryCount?: TransportConfig['retryCount']\n  /** The base delay (in ms) between retries. */\n  retryDelay?: TransportConfig['retryDelay']\n}\n\nexport type CustomTransport = Transport<\n  'custom',\n  {},\n  EthereumProvider['request']\n>\n\n/**\n * @description Creates a custom transport given an EIP-1193 compliant `request` attribute.\n */\nexport function custom<TProvider extends EthereumProvider>(\n  provider: TProvider,\n  config: CustomTransportConfig = {},\n): CustomTransport {\n  const { key = 'custom', name = 'Custom Provider', retryDelay } = config\n  return ({ retryCount: defaultRetryCount }) =>\n    createTransport({\n      key,\n      name,\n      request: provider.request.bind(provider),\n      retryCount: config.retryCount ?? defaultRetryCount,\n      retryDelay,\n      type: 'custom',\n    })\n}\n"],"mappings":"AAAA,SAGEA,eAAe,QACV,sBAAsB;AAqB7B;;;AAGA,OAAM,SAAUC,MAAMA,CACpBC,QAAmB,EACe;EAAA,IAAlCC,MAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAgC,EAAE;EAElC,MAAM;IAAEG,GAAG,GAAG,QAAQ;IAAEC,IAAI,GAAG,iBAAiB;IAAEC;EAAU,CAAE,GAAGN,MAAM;EACvE,OAAOO,IAAA;IAAA,IAAC;MAAEC,UAAU,EAAEC;IAAiB,CAAE,GAAAF,IAAA;IAAA,OACvCV,eAAe,CAAC;MACdO,GAAG;MACHC,IAAI;MACJK,OAAO,EAAEX,QAAQ,CAACW,OAAO,CAACC,IAAI,CAACZ,QAAQ,CAAC;MACxCS,UAAU,EAAER,MAAM,CAACQ,UAAU,IAAIC,iBAAiB;MAClDH,UAAU;MACVM,IAAI,EAAE;KACP,CAAC;EAAA;AACN"},"metadata":{},"sourceType":"module","externalDependencies":[]}